trigger:
- master

jobs:
- job: 'Test_Versioning'
  pool:
    vmImage: ubuntu-16.04

  steps:
  - bash: |
      apt-get install jq -y
      URL=$(Build.Repository.Uri)
      REPO=`echo "$URL" | awk -F ".com/" '{ print $2 }'`
      BRANCH_NAME=$(Build.SourceBranchName)
      PULL_REQUEST_JSON=$(curl https://api.github.com/repos/woksin/TestVersioning/pulls\?state\=all | jq '.[] | select((.state=="open") and (.head.ref=="'$BRANCH_NAME'"))')
      LABELS=$(echo $PULL_REQUEST_JSON | jq '.labels | .[] | .name' -r )
      MAJOR_LABEL=$(echo $LABELS | grep -E '^major')
      MINOR_LABEL=$(echo $LABELS | grep -E '^minor')
      PATCH_LABEL=$(echo $LABELS | grep -E '^patch')
      echo "Got labels:"
      echo $LABELS
      
      IS_MERGE=$(curl https://api.github.com/repos/$REPO/pulls\?state\=all | tr ',' '\n' | grep merged_at | head -1 | cut -d ":" -f 2 | tr -d '"')
      if [ "$IS_MERGE" != "null" ]
      then
          echo "Getting version tag"
          VERSION=$(git -c 'versionsort.suffix=-' ls-remote -t --exit-code --refs --sort=-v:refname | sed -E 's/^[[:xdigit:]]+[[:space:]]+refs\/tags\/(.+)/\1/g' | grep -E '^\d+\.\d+\.\d+$' | head -1)
          if [ ! "$VERSION" ]
          then
              VERSION=1.0.0
              echo "No version tag found. Setting version to $VERSION"
          fi
          MAJOR=`echo $VERSION | awk -F "." '{print $1}'`
          MINOR=`echo $VERSION | awk -F "." '{print $2}'`
          PATCH=`echo $VERSION | awk -F "." '{print $3}'`
          SHOULD_TAG=true
          
          if [ "$MAJOR_LABEL" = "major" ]
          then
              echo "New major release"
              MAJOR=$((MAJOR+1))
              MINOR="0"
              PATCH="0"

          elif [ "$MINOR_LABEL" = "minor" ]
          then
              echo "New minor release"
              MINOR=$((MINOR+1))
              PATCH="0"
          elif [ "$PATCH_LABEL" = "patch" ]
          then
              echo "New patch release"
              PATCH=$((PATCH+1))
          else
              echo "Should not trigger a new release version"
              SHOULD_TAG=false
          fi

          if [ "$SHOULD_TAG" = true ]
          then
              git config --global http.$REPO_URL.extraHeader "Authorization: Basic $CascadingBuild"
              git tag -a "$MAJOR"."$MINOR"."$PATCH" -m ""
              echo "Previous version $VERSION"
              echo "New version : $MAJOR.$MINOR.$PATCH"
              git push --tags
          fi
      else
          echo "Pull request not merged yet"
      fi
      
    displayName: Handle versioning tag
    
