trigger:
- master

variables:
- group: global-var-pipelines

jobs:
- job: 'Test_Versioning'
  pool:
    vmImage: ubuntu-16.04

  steps:
  - bash: |
      URL=$(Build.Repository.Uri)
      BRANCH=$(Build.SourceBranch) 
      COMMIT_SHA=$(Build.SourceVersion)
      REPO=`echo "$URL" | awk -F ".com/" '{ print $2 }'`
      BRANCH=$(echo $BRANCH | cut -d "/" -f 3)
      if [ "$BRANCH" = "master" ]
      then
          MERGED_PR_JSON=$(curl https://api.github.com/repos/$REPO/pulls\?state\=all | jq '.[] | select(.merge_commit_sha=="'$COMMIT_SHA'")')
          LABELS=$(echo $MERGED_PR_JSON | jq '.labels | .[] | .name' -r)
          MAJOR_LABEL=$(echo "$LABELS" | grep -E '^major$')
          MINOR_LABEL=$(echo "$LABELS" | grep -E '^minor$')
          PATCH_LABEL=$(echo "$LABELS" | grep -E '^patch$')
          echo "Got labels:"
          echo "$LABELS"
          echo "Getting version tag"
          TAG_REFS=$(git -c 'versionsort.suffix=-' ls-remote --refs --sort=-v:refname)
          while [ ! "$TAG_REFS" ]
          do
              sleep 1
          done
          VERSION=$(echo $TAG_REFS | grep -o -E "refs/tags/\S+" | grep -o -e "[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1)
          NEW_PROJECT=false
          if [ ! "$VERSION" ]
          then
              NEW_PROJECT=true
              VERSION=1.0.0
              echo "No version tag found. Setting version to $VERSION"
          fi
          MAJOR=`echo $VERSION | awk -F "." '{print $1}'`
          MINOR=`echo $VERSION | awk -F "." '{print $2}'`
          PATCH=`echo $VERSION | awk -F "." '{print $3}'`
          SHOULD_TAG=false

          if [ "$MAJOR_LABEL" = "major" ] || [ "$MINOR_LABEL" = "minor" ] || [ "$PATCH_LABEL" = "patch" ]
          then
              SHOULD_TAG=true
          fi
          
          if [ "$MAJOR_LABEL" = "major" ] && [ "$NEW_PROJECT" = false ]
          then
              echo "New major release"
              MAJOR=$((MAJOR+1))
              MINOR="0"
              PATCH="0"

          elif [ "$MINOR_LABEL" = "minor" ] && [ "$NEW_PROJECT" = false ]
          then
              echo "New minor release"
              MINOR=$((MINOR+1))
              PATCH="0"
          elif [ "$PATCH_LABEL" = "patch" ] && [ "$NEW_PROJECT" = false ]
          then
              echo "New patch release"
              PATCH=$((PATCH+1))
          fi
          if [ "$SHOULD_TAG" = true ]
          then
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
              # Set a variable to be used at the same job level. To share between jobs add isoutput(or something)=true
              echo "##vso[task.setvariable variable=Version]$NEW_VERSION"
              echo "Triggering new version tag"
              git config user.name \"$GIT_USERNAME\"
              git config user.email \"$GIT_EMAIL\"
              git tag -a "$NEW_VERSION" -m "Azure Devops Pipelines Versioning Strategy: Tagging new version"
              echo Previous version "$VERSION"
              echo New version "$NEW_VERSION"
              git push https://$GIT_USERNAME:$PAT@github.com/$REPO HEAD:$BRANCH --tags
          else
              echo "##vso[task.setvariable variable=Version]empty"
              echo "No label triggering new version"
          fi
      else
           echo "##vso[task.setvariable variable=Version]empty"
      fi

    displayName: Handle version tag
    name: VersionHandling
    env:
      GIT_EMAIL: $(GitEmail)
      GIT_USERNAME: $(GitUsername)
      PAT: $(CascadingBuild)
  
  - task: NodeTool@0
    displayName: Ensuring node version
    inputs:
      versionSpec: '>=12.0.0'
  
  - script: npm i yarn -g
    displayName: Installing yarn


  - script: yarn
    displayName: Installing dependencies

  - bash: |
      echo "$(Version)"
      if [ "$(Version)" != "empty" ]
      then
          URL=$(Build.Repository.Uri)
          BRANCH=$(Build.SourceBranch) 
          REPO=`echo "$URL" | awk -F ".com/" '{ print $2 }'`
          BRANCH=$(echo $BRANCH | cut -d "/" -f 3)
          
          git config user.name \"$GIT_USERNAME\"
          git config user.email \"$GIT_EMAIL\"

          echo Triggering new release of version "$(Version)"
          
          echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc
          echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > ~/.npmrc

          WORKSPACES=$(jq '.workspaces' package.json)
          if [ "$WORKSPACES" = null ]
          then
              echo Releasing single package
              JSON=$(jq -r -e --arg ver $(Version) '.version = $ver' package.json)
              echo "$JSON" > package.json
              git add package.json
              npm publish
              git commit -m "Increment version"
              git push https://$GIT_USERNAME:$PAT@github.com/$REPO HEAD:$BRANCH

              git tag -d $(Version) && git tag $(Version)
              git push https://$GIT_USERNAME:$PAT@github.com/$REPO :$(Version)
              git push https://$GIT_USERNAME:$PAT@github.com/$REPO $(Version)
          else
              echo "Releasing multiple packages"
              PACKAGES=$(find Source/*/package.json)
              echo "$PACKAGES" | while read -r package
              do
                  JSON=$(jq -r -e --arg ver $(Version) '.version = $ver' "$package")
                  echo "$JSON" > "$package"
                  git add "$package"
                  dir=dirname "$package"
                  cd "$dir"
                  npm publish
                  cd ../..
              done
              git commit -m "Increment versions"
              git push https://$GIT_USERNAME:$PAT@github.com/$REPO HEAD:$BRANCH

              git tag -d $(Version) && git tag $(Version)
              git push https://$GIT_USERNAME:$PAT@github.com/$REPO :$(Version)
              git push https://$GIT_USERNAME:$PAT@github.com/$REPO $(Version)
          fi
      else
          echo "No new version to release"
      fi
    displayName: Handling release
    env:
        NPM_TOKEN: $(NpmToken)
        GIT_USERNAME: $(GitUsername)
        GIT_EMAIL: $(GitEmail)
        PAT: $(CascadingBuild)
