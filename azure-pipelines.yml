trigger:
- master

variables:
- group: global-var-pipelines

jobs:
- job: 'Test_Versioning'
  pool:
    vmImage: ubuntu-16.04

  steps:
  - bash: |
      which sed
      URL=$(Build.Repository.Uri)
      COMMIT_SHA=$(Build.SourceVersion)
      BRANCH=$(Build.SourceBranch) 
      REPO=`echo "$URL" | awk -F ".com/" '{ print $2 }'`
      ID=$(echo $BRANCH | cut -d "/" -f 3)
      # If it's master it might be a merged PR
      if [ "$ID" = "master" ]
      then
          #This may crash? Gets closed PR with merge sha id
          MERGED_PR_JSON=$(curl https://api.github.com/repos/$REPO/pulls\?state\=all | jq '.[] | select(.merge_commit_sha=="'$COMMIT_SHA'")')
          # Get labels
          LABELS=$(echo $MERGED_PR_JSON | jq '.labels | .[] | .name' -r )
          MAJOR_LABEL=$(echo $LABELS | grep -E '^major$')
          MINOR_LABEL=$(echo $LABELS | grep -E '^minor$')
          PATCH_LABEL=$(echo $LABELS | grep -E '^patch$')
          echo "Got labels:"
          echo $LABELS
          echo "Getting version tag"
          VERSION=$(git -c 'versionsort.suffix=-' ls-remote -t --exit-code --refs --sort=-v:refname | sed -E 's/.+refs\/tags\/(.+)/\1/g' | grep -E '^\d+\.\d+\.\d+$' | head -1)
          RAW=$(git -c 'versionsort.suffix=-' ls-remote -t --exit-code --refs --sort=-v:refname)
          echo $RAW
          $RAW | sed -E 's/.+refs\/tags\/(.+)/\1/g'
          $RAW | sed -E 's/.+refs\/tags\/(.+)/\1/g' | grep -E '^\d+\.\d+\.\d+$'
          $RAW | sed -E 's/.+refs\/tags\/(.+)/\1/g' | grep -E '^\d+\.\d+\.\d+$' | head -1
          echo "Got version:"
          echo $VERSION
          NEW_PROJECT=false
          if [ ! "$VERSION" ]
          then
              NEW_PROJECT=true
              VERSION=1.0.0
              echo "No version tag found. Setting version to $VERSION"
          fi
          MAJOR=`echo $VERSION | awk -F "." '{print $1}'`
          MINOR=`echo $VERSION | awk -F "." '{print $2}'`
          PATCH=`echo $VERSION | awk -F "." '{print $3}'`
          SHOULD_TAG=false

          if [ "$MAJOR_LABEL" = "major" ] || [ "$MINOR_LABEL" = "minor" ] || [ "$PATCH_LABEL" = "patch" ]
          then
              SHOULD_TAG=true
          fi
          
          if [ "$MAJOR_LABEL" = "major" ] && [ "$NEW_PROJECT" = false ]
          then
              echo "New major release"
              MAJOR=$((MAJOR+1))
              MINOR="0"
              PATCH="0"

          elif [ "$MINOR_LABEL" = "minor" ] && [ "$NEW_PROJECT" = false ]
          then
              echo "New minor release"
              MINOR=$((MINOR+1))
              PATCH="0"
          elif [ "$PATCH_LABEL" = "patch" ] && [ "$NEW_PROJECT" = false ]
          then
              echo "New patch release"
              PATCH=$((PATCH+1))
          fi
          if [ "$SHOULD_TAG" = true ]
          then
              echo "Triggering new version tag"
              git config user.name \"$GIT_USERNAME\"
              git config user.email \"$GIT_EMAIL\"
              git tag -a "$MAJOR"."$MINOR"."$PATCH" -m "Azure Devops Pipelines Versioning Strategy: Tagging new version"
              echo "Previous version $VERSION"
              echo "New version : $MAJOR.$MINOR.$PATCH"
              git push https://$GIT_USERNAME:$PAT@github.com/$REPO HEAD:$ID --tags
          else
              echo "No label triggering new version"
          fi
      fi
      echo "End of script"

    displayName: Handle versioning tag
    env:
      GIT_EMAIL: $(GitEmail)
      GIT_USERNAME: $(GitUsername)
      PAT: $(CascadingBuild)
    
